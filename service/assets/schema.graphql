# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type ClientType {
    birthday: Date!
    cardNumber: String!
    email: String!
    firstName: String!
    lastName: String!
    passSet: [PassModelType!]!
}

type CreateClient {
    client: ClientType
}

type CreateEntrance {
    entrance: EntranceType
}

type CreateInstructor {
    instructor: InstructorType
}

type CreateInterval {
    interval: IntervalType
}

type CreatePass {
    passModel: PassModelType
}

type CreatePassType {
    passType: PassTypeType
}

type CreateRole {
    role: RoleType
}

type CreateSection {
    section: SectionModelType
}

type CreateSectionType {
    sectionType: SectionTypeType
}

type DeleteClient {
    client: ClientType
}

type DeleteEntrance {
    entrance: EntranceType
}

type DeleteInstructor {
    instructor: InstructorType
}

type DeleteInterval {
    interval: IntervalType
}

type DeletePass {
    passModel: PassModelType
}

type DeletePassType {
    passType: PassTypeType
}

type DeleteRole {
    role: RoleType
}

type DeleteSection {
    section: SectionModelType
}

type DeleteSectionType {
    sectionType: SectionTypeType
}

type EntranceType {
    date: Date!
    id: ID!
    passModel: PassModelType!
}

type InstructorType {
    firstName: String!
    id: ID!
    lastLogin: DateTime
    lastName: String!
    password: String!
    role: [RoleType!]!
    sectionSet: [SectionModelType!]!
    username: String!
}

type IntervalType {
    endTime: Time!
    id: ID!
    sectionSet: [SectionModelType!]!
    startTime: Time!
}

type Mutation {
    createClient(input: ClientInput!): CreateClient
    createEntrance(input: EntranceInput!): CreateEntrance
    createInstructor(input: InstructorInput!): CreateInstructor
    createInterval(input: IntervalInput!): CreateInterval
    createPass(input: PassInput!): CreatePass
    createPasstype(input: PassTypeInput!): CreatePassType
    createRole(input: RoleInput!): CreateRole
    createSection(input: SectionInput!): CreateSection
    createSectiontype(input: SectionTypeInput!): CreateSectionType
    deleteClient(id: String): DeleteClient
    deleteEntrance(id: ID): DeleteEntrance
    deleteInstructor(id: ID): DeleteInstructor
    deleteInterval(id: ID): DeleteInterval
    deletePass(id: ID): DeletePass
    deletePasstype(id: ID): DeletePassType
    deleteRole(id: ID): DeleteRole
    deleteSection(id: ID): DeleteSection
    deleteSectiontype(id: ID): DeleteSectionType
    updateClient(id: String, input: ClientInput!): UpdateClient
    updateEntrance(id: ID, input: EntranceInput!): UpdateEntrance
    updateInstructor(id: ID, input: InstructorInput!): UpdateInstructor
    updateInterval(id: ID, input: IntervalInput!): UpdateInterval
    updatePass(id: ID, input: PassInput!): UpdatePass
    updatePasstype(id: ID, input: PassTypeInput!): UpdatePassType
    updateRole(id: ID, input: RoleInput!): UpdateRole
    updateSection(id: ID, input: SectionInput!): UpdateSection
    updateSectiontype(id: ID, input: SectionTypeInput!): UpdateSectionType
}

type PassModelType {
    client: ClientType!
    entranceSet: [EntranceType!]!
    id: ID!
    month: Date!
    passType: PassTypeType
    section: SectionModelType
}

type PassTypeType {
    expirationDate: Int!
    id: ID!
    maxEntryCount: Int!
    name: String!
    passSet: [PassModelType!]!
    price: Int!
}

type Query {
    clients: [ClientType]
    entrances: [EntranceType]
    instructors: [InstructorType]
    intervals: [IntervalType]
    passTypes: [PassTypeType]
    passes: [PassModelType]
    roles: [RoleType]
    sectionTypes: [SectionTypeType]
    sections: [SectionModelType]
    user(token: String!): InstructorType
    users: [InstructorType]
}

type RoleType {
    id: ID!
    instructorSet: [InstructorType!]!
    name: String!
}

type SectionModelType {
    id: ID!
    instructor: InstructorType!
    interval: IntervalType!
    passSet: [PassModelType!]!
    sectionType: SectionTypeType!
    weekDay: Int!
}

type SectionTypeType {
    id: ID!
    maxCount: Int!
    name: String!
    price: Int!
    priceOnceAWeek: Int!
    sectionSet: [SectionModelType!]!
}

type UpdateClient {
    client: ClientType
}

type UpdateEntrance {
    entrance: EntranceType
}

type UpdateInstructor {
    instructor: InstructorType
}

type UpdateInterval {
    interval: IntervalType
}

type UpdatePass {
    passModel: PassModelType
}

type UpdatePassType {
    passType: PassTypeType
}

type UpdateRole {
    role: RoleType
}

type UpdateSection {
    section: SectionModelType
}

type UpdateSectionType {
    sectionType: SectionTypeType
}

"""

The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""

The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""

The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

input ClientInput {
    birthday: Date
    email: String
    firstName: String
    lastName: String
}

input EntranceInput {
    date: Date
    passModelId: Int
}

input InstructorInput {
    firstName: String
    lastName: String
    password: String
    roleId: [Int]
    username: String
}

input IntervalInput {
    endTime: Time
    startTime: Time
}

input PassInput {
    clientId: String
    month: Date
    passTypeId: Int
    sectionId: Int
}

input PassTypeInput {
    expirationDate: Int
    maxEntryCount: Int
    name: String
    price: Int
}

input RoleInput {
    name: String
}

input SectionInput {
    instructorId: Int
    intervalId: Int
    sectionTypeId: Int
    weekDay: Int
}

input SectionTypeInput {
    maxCount: Int
    name: String
    price: Int
    priceOnceAWeek: Int
}
